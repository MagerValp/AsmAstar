SYMBOLS {
    __LOADADDR__:  type = import;
    __EXEHDR__:    type = import;
    __STACKSIZE__: type = weak, value = $0800; # 2k stack
}
MEMORY {
    ZP:       file = "", define = yes, start = $0002, size = $001A;
#    BENCHZP:  file = "",               start = $005f, size = $0004;
    LOADADDR: file = %O,               start = $07FF, size = $0002;
    HEADER:   file = %O,               start = $0801, size = $000C;
    RAM:      file = %O, define = yes, start = $080D, size = $C7F3 - __STACKSIZE__;
}
SEGMENTS {
    LOADADDR: load = LOADADDR, type = ro;
    EXEHDR:   load = HEADER,   type = ro;
    STARTUP:  load = RAM,      type = ro;
    LOWCODE:  load = RAM,      type = ro,                optional = yes;
    INIT:     load = RAM,      type = ro,  define = yes, optional = yes;
    CODE:     load = RAM,      type = ro;
    RODATA:   load = RAM,      type = ro,  align = 64;
    DATA:     load = RAM,      type = rw;
    ZPSAVE:   load = RAM,      type = bss;
    BSS:      load = RAM,      type = bss, define = yes, align = 256;
    ZEROPAGE: load = ZP,       type = zp;
#    BENCHZP:  load = BENCHZP,  type = zp;
}
FEATURES {
    CONDES: type    = constructor,
            label   = __CONSTRUCTOR_TABLE__,
            count   = __CONSTRUCTOR_COUNT__,
            segment = INIT;
    CONDES: type    = destructor,
            label   = __DESTRUCTOR_TABLE__,
            count   = __DESTRUCTOR_COUNT__,
            segment = RODATA;
    CONDES: type    = interruptor,
            label   = __INTERRUPTOR_TABLE__,
            count   = __INTERRUPTOR_COUNT__,
            segment = RODATA,
            import  = __CALLIRQ__;
}
